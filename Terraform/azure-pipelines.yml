trigger:
  branches:
    include:
    - main

pool:
  vmImage: 'ubuntu-latest'


steps:
# mk test
- task: TerraformInstaller@1
  inputs:
    terraformVersion: 'latest'
##


- checkout: self
  displayName: 'Checkout repository'

- task: TerraformTaskV4@4
  displayName: 'Terraform Init'
  inputs:
    provider: 'azurerm'
    command: 'init'
    backendServiceArm: 'GERALEXGR'
    backendAzureRmResourceGroupName: 'mk-space-game-rg'
    backendAzureRmStorageAccountName: 'mktseststorage'
    backendAzureRmContainerName: 'mkstestcontainer'
    backendAzureRmKey: infrax.tfstate

  #inputs:
  #  provider: 'azurerm' 
  #  command: 'init'
  #  workingDirectory: '$(Build.SourcesDirectory)'
  #  backendType: 'azurerm'
  #  ensureBackend: true
  #  backendServiceArm: GERALEXGR
  #  resourceGroupName: 'mk-space-game-rg'
    #storageAccountName: '<storage_account_name>'
    #containerName: '<container_name>'
    #key: '<state_file_key>'

- task: TerraformTaskV3@3
  displayName: 'Terraform Validate'
  inputs:
    command: 'validate'
    workingDirectory: '$(Build.SourcesDirectory)'

## New plan
- task: TerraformTaskV4@4
  displayName: 'Terraform Plan...'
  inputs:
    provider: 'azurerm'
    command: 'plan'
    workingDirectory: '$(System.DefaultWorkingDirectory)/Terraform'
    environmentServiceNameAzureRM: 'GERALEXGR'
##

#- task: TerraformTaskV3@3
#  displayName: 'Terraform Plan'
#  inputs:
#    command: 'plan'
#    workingDirectory: '$(Build.SourcesDirectory)'
#    environmentServiceNameAzureRM: 'GERALEXGR'
#    #environmentServiceName: 
#    commandOptions: '-out=tfplan'    

#- task: TerraformTaskV3@3
#  displayName: 'Terraform Apply'
#  inputs:
#    command: 'apply'
#    workingDirectory: '$(Build.SourcesDirectory)'
#    environmentServiceName: 'GERALEXGR'
#    commandOptions: '-auto-approve -input=false tfplan'